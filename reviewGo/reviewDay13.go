package reviewGo

import (
	"fmt"
)

func RunDay13() {
	day13Ex3()
}

// 进制转换: 2/8/16 转 10 进制
func day13Ex1() {
	// 二进制,从最低位开始, 将每个位的数提取出来. 乘以 2 的(位数 -1 )次方, 然后求和
	// 1011 = 1*1 + 1*2 + 0*2*2 + 1*2*2*2
	// 8 进制制 .... 8 的次方(位数 - 1)

	// 16 进制 ..... 16 ....
}

// 位运算
func day13Ex2() {
	/* 这三种编码方式 主要用于 有符号 整数 的运算 */
	// 原码
	/* 原码是最直接的方式来表达一个数字, 原码的最左边是一个符号位. 符号位 0: 正数, 1: 负数; 其他位表现为绝对值  */
	// 反码
	/* 反码: 基于原码得到, 对于正数来说, 反码与源码相同. 对于负数来说, 补码是除去 符号位, 其余的取反 */
	// 补码
	/* 补码: 基于原码得到, 对于正数来说, 补码与源码相同. 对于负数来说, 补码是 反码 + 1 */

	//进行运算的时候, 都是 补码 的方式 来运算
	/*
		& => 按位 与 两位全为 1 结果 1, 否则 0
		| => 按位 或 任意一位为 1 结果 1, 否则 0
		^ => 按位 或 两位 一个位 0, 一个为 1,  结果 1, 否则 0
	*/

	fmt.Println(2 & 3)  //2 0000 0010, 0000,0011 => 0000 0010
	fmt.Println(2 | 3)  //3 0000 0010, 0000,0011 => 0000 0011
	fmt.Println(2 ^ 3)  //1 0000 0010, 0000,0011 => 0000 0001
	fmt.Println(-2 ^ 2) //-4  (1000 0010 => 1111 1101 => 1111 1110)  1111 1110 , 0000,0010 => 1111 1100  (1111 1100 =>1111 1011 => 1000 0100) => -4
}

// 移位运算
func day13Ex3() {

	/* 右移 */
	// 右移1 位, 数值减半
	var temp1 int64 = 1
	fmt.Println(temp1 << 2)
	fmt.Println(fmt.Sprintf("%b", temp1))
	fmt.Println(fmt.Sprintf("%b", temp1<<2))
	/* 左移 */
	// 右移 1 位, 数值翻倍
	var temp2 int64 = 100
	fmt.Println(temp2 >> 2)
	fmt.Println(fmt.Sprintf("%b", temp2))
	fmt.Println(fmt.Sprintf("%b", temp2>>2))

	// 使用位运算 实现 交换变量; tip: 适用于整数
	a, b := -2, 3
	a = a ^ b
	b = a ^ b
	a = a ^ b
	fmt.Println(a, b)

	c, d := 1.1, 2.2
	c = c + d
	d = c - d
	c = c - d
	fmt.Println(c, d)

}
